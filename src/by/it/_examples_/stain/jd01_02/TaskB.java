/*–í –∫–ª–∞—Å—Å–µ TaskB (–ø–∞–∫–µ—Ç by.it.familiya.jd01_02) —Å–æ–∑–¥–∞–π—Ç–µ Scanner –∏ –º–µ—Ç–æ–¥—ã:
static void step1()
static void step2(int month)
static void step3(double a, double b, double c)
–≤—ã–∑–æ–≤–∏—Ç–µ –∏—Ö –æ–¥–∏–Ω —Ä–∞–∑ –∏–∑ –º–µ—Ç–æ–¥–∞ main. –≠—Ç–∏ –º–µ—Ç–æ–¥—ã —Ä–µ—à–∞—é—Ç —Ç–∞–∫–∏–µ –∑–∞–¥–∞—á–∏:
1. step1() –≤—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 25 –≤ –≤–∏–¥–µ –º–∞—Ç—Ä–∏—Ü—ã N x N —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏
—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (—Ç.–µ. N = 5). –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª.
2. –í main –≤–≤–µ—Å—Ç–∏ —Å –∫–æ–Ω—Å–æ–ª–∏ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ Scanner —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12 –∏ —Å
–Ω–∏–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ step2(int month), –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Ä—É—Å—Å–∫–æ–µ
–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç—Ç–æ–º—É —á–∏—Å–ª—É —á–µ—Ä–µ–∑
switch. –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚Äú–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞‚Äù –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
–≤–æ –≤–≤–æ–¥–µ (—ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å default ‚Äì –≤–µ—Ç–∫–∞ –¥–ª—è switch).
3. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–Ω–∏ (–∏–ª–∏ –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å) –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è.
–ï—Å–ª–∏ –∫–æ—Ä–Ω—è –Ω–µ—Ç, —Ç–æ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äú–∫–æ—Ä–Ω–µ–π –Ω–µ—Ç‚Äù.
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã (a b c) —É—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ main —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ Scanner –∏
–∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –º–µ—Ç–æ–¥ step3(double a, double b, double c).
–î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ùê∑ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ Math.sqrt(–¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç)*/

package by.it._examples_.stain.jd01_02;

import java.util.Scanner;


public class TaskB {
    public static void main(String[] args) {
        step1();
        Scanner s = new Scanner(System.in);
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12");
        int month = s.nextInt();
        step2(month);
        System.out.println("–í–≤–µ–¥–∏—Ç–µ 3 —á–∏—Å–ª–∞: ");
        double a = s.nextInt();
        double b = s.nextInt();
        double c = s.nextInt();


        step3(a, b, c);


    }


    private static void step1() {
        int[][] array = new int[5][5];
        int x = 1;

        for (int i = 0; i < 5; i++) {

            for (int j = 0; j < 5; j++) {
                array[i][j] = x;
                x++;


            }

        }
        for (int i = 0; i < 5; i++, System.out.println()) {
            for (int j = 0; j < 5; j++) {
                System.out.print(array[i][j] + " ");

            }
        }
    }

    private static void step2(int month) {
        switch (month) {
            case 1:
                System.out.println("—è–Ω–≤–∞—Ä—å");
                break;
            case 2:
                System.out.println("—Ñ–µ–≤—Ä–∞–ª—å");
                break;
            case 3:
                System.out.println("–º–∞—Ä—Ç");
                break;
            case 4:
                System.out.println("–∞–ø—Ä–µ–ª—å");
                break;
            case 5:
                System.out.println("–º–∞–π");
                break;
            case 6:
                System.out.println("–∏—é–Ω—å");
                break;
            case 7:
                System.out.println("–∏—é–ª—å");
                break;
            case 8:
                System.out.println("–∞–≤–≥—É—Å—Ç");
                break;
            case 9:
                System.out.println("—Å–µ–Ω—Ç—è–±—Ä—å");
                break;
            case 10:
                System.out.println("–æ–∫—Ç—è–±—Ä—å");
                break;
            case 11:
                System.out.println("–Ω–æ—è–±—Ä—å");
                break;
            case 12:
                System.out.println("–¥–µ–∫–∞–±—Ä—å");
                break;
            default:
                System.out.println("–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞");


        }


    }

    private static void step3(double a, double b, double c) {

        double D;
        D = b * b - 4 * a * c;
        if (D > 0) {
            double x1, x2;
            x1 = (-b - Math.sqrt(D)) / (2 * a);
            x2 = (-b + Math.sqrt(D)) / (2 * a);
            System.out.println("–ö–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: x1 = " + x1 + ", x2 = " + x2);
        } else if (D == 0) {
            double x;
            x = -b / (2 * a);
            System.out.println("–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å: x = " + x);
        } else {
            System.out.println("–∫–æ—Ä–Ω–µ–π –Ω–µ—Ç");
        }


    }
}
